diff --git a/protocols/jabber/glibjingle/talk/session/phone/linphonemediaengine.cc b/protocols/jabber/libjingle/talk/session/phone/linphonemediaengine.cc
index 3188efa..c4bf1b1 100644
--- a/protocols/jabber/glibjingle/talk/session/phone/linphonemediaengine.cc
+++ b/protocols/jabber/libjingle/talk/session/phone/linphonemediaengine.cc
@@ -29,6 +29,10 @@
 #define MSILBC_LIBRARY "/usr/lib/mediastreamer/plugins/libmsilbc.so"
 #endif
 
+#define PORT_UNUSED -1
+
+#ifdef HAVE_LINPHONE
+
 // LinphoneMediaEngine is a Linphone implementation of MediaEngine
 extern "C" {
 #include <mediastreamer2/mediastream.h>
@@ -54,39 +58,34 @@ namespace cricket {
 ///////////////////////////////////////////////////////////////////////////
 // Implementation of LinphoneMediaEngine.
 ///////////////////////////////////////////////////////////////////////////
-LinphoneMediaEngine::LinphoneMediaEngine(const std::string& ringWav,  const std::string& callWav) : ring_wav_(ringWav), call_wav_(callWav) { }
-
-bool LinphoneMediaEngine::Init() {
+LinphoneMediaEngine::LinphoneMediaEngine(const std::string& ringWav,  const std::string& callWav) : ring_wav_(ringWav), call_wav_(callWav) {
   ortp_init();
   ms_init();
 
-#ifdef HAVE_ILBC
 #ifndef WIN32
   char * path = strdup(MSILBC_LIBRARY);
   char * dirc = dirname(path);
   ms_load_plugins(dirc);
-#endif
-  if (ms_filter_codec_supported("iLBC"))
-    have_ilbc = 1;
-  else
-    have_ilbc = 0;
-#else
-  have_ilbc = 0;
+  free(path);
 #endif
 
-#ifdef HAVE_SPEEX
-  voice_codecs_.push_back(AudioCodec(110, payload_type_speex_wb.mime_type, payload_type_speex_wb.clock_rate, 0, 1, 8));
-  voice_codecs_.push_back(AudioCodec(111, payload_type_speex_nb.mime_type, payload_type_speex_nb.clock_rate, 0, 1, 7));
-#endif
+  have_ilbc = ms_filter_codec_supported("iLBC");
+  have_speex = ms_filter_codec_supported("speex");
+  have_gsm = ms_filter_codec_supported("gsm");
+
+  if (have_speex) {
+    voice_codecs_.push_back(AudioCodec(110, payload_type_speex_wb.mime_type, payload_type_speex_wb.clock_rate, 0, 1, 8));
+    voice_codecs_.push_back(AudioCodec(111, payload_type_speex_nb.mime_type, payload_type_speex_nb.clock_rate, 0, 1, 7));
+  }
 
-#ifdef HAVE_ILBC
   if (have_ilbc)
     voice_codecs_.push_back(AudioCodec(102, payload_type_ilbc.mime_type, payload_type_ilbc.clock_rate, 0, 1, 4));
-#endif
+
+  if (have_gsm)
+    voice_codecs_.push_back(AudioCodec(3, payload_type_gsm.mime_type, payload_type_gsm.clock_rate, 0, 1, 3));
 
   voice_codecs_.push_back(AudioCodec(0, payload_type_pcmu8000.mime_type, payload_type_pcmu8000.clock_rate, 0, 1, 2));
   voice_codecs_.push_back(AudioCodec(101, payload_type_telephone_event.mime_type, payload_type_telephone_event.clock_rate, 0, 1, 1));
-  return true;
 }
 
 void LinphoneMediaEngine::Terminate() {
@@ -112,47 +111,59 @@ VideoMediaChannel* LinphoneMediaEngine::CreateVideoChannel(VoiceMediaChannel* vo
 bool LinphoneMediaEngine::FindAudioCodec(const AudioCodec &c) {
   if (c.id == 0)
     return true;
-  if (c.name == payload_type_telephone_event.mime_type)
+  if (stricmp(c.name.c_str(), payload_type_telephone_event.mime_type) == 0)
     return true;
-#ifdef HAVE_SPEEX
-  if (c.name == payload_type_speex_wb.mime_type && c.clockrate == payload_type_speex_wb.clock_rate)
+  if (have_speex && stricmp(c.name.c_str(), payload_type_speex_wb.mime_type) == 0 && c.clockrate == payload_type_speex_wb.clock_rate)
     return true;
-  if (c.name == payload_type_speex_nb.mime_type && c.clockrate == payload_type_speex_nb.clock_rate)
+  if (have_speex && stricmp(c.name.c_str(), payload_type_speex_nb.mime_type) == 0 && c.clockrate == payload_type_speex_nb.clock_rate)
     return true;
-#endif
-#ifdef HAVE_ILBC
-  if (have_ilbc && c.name == payload_type_ilbc.mime_type)
+  if (have_ilbc && stricmp(c.name.c_str(), payload_type_ilbc.mime_type) == 0)
+    return true;
+  if (have_gsm && stricmp(c.name.c_str(), payload_type_gsm.mime_type) == 0)
     return true;
-#endif
   return false;
 }
 
+
 ///////////////////////////////////////////////////////////////////////////
 // Implementation of LinphoneVoiceChannel.
 ///////////////////////////////////////////////////////////////////////////
 LinphoneVoiceChannel::LinphoneVoiceChannel(LinphoneMediaEngine*eng)
     : pt_(-1),
-      audio_stream_(0),
+      profile_(false),
       engine_(eng),
       ring_stream_(0)
 {
 
-  talk_base::Thread *thread = talk_base::ThreadManager::CurrentThread();
+  talk_base::Thread *thread = talk_base::ThreadManager::Instance()->CurrentThread();
   talk_base::SocketServer *ss = thread->socketserver();
-  socket_.reset(ss->CreateAsyncSocket(SOCK_DGRAM));
 
-  socket_->Bind(talk_base::SocketAddress("localhost",3000));
+  socket_.reset(ss->CreateAsyncSocket(SOCK_DGRAM));
+  socket_->Bind(talk_base::SocketAddress("localhost", 0)); /* 0 means that OS will choose some free port */
+  captport = socket_->GetLocalAddress().port(); /* and here we get port choosed by OS */
   socket_->SignalReadEvent.connect(this, &LinphoneVoiceChannel::OnIncomingData);
 
+  socketRtcp_.reset(ss->CreateAsyncSocket(SOCK_DGRAM));
+  socketRtcp_->Bind(talk_base::SocketAddress("localhost", captport+1));
+  socketRtcp_->SignalReadEvent.connect(this, &LinphoneVoiceChannel::OnIncomingRtcp);
+
+  playport = PORT_UNUSED;
+
+#ifdef _DEBUG
+  ortp_set_log_level_mask(ORTP_DEBUG|ORTP_MESSAGE|ORTP_WARNING|ORTP_ERROR|ORTP_FATAL);
+#else
+  ortp_set_log_level_mask(ORTP_FATAL);
+#endif
+
+  audio_stream_ = audio_stream_new(-1, 0); /* -1 means that function will choose some free port */
+
 }
 
 LinphoneVoiceChannel::~LinphoneVoiceChannel()
 {
   fflush(stdout);
   StopRing();
-
-  if (audio_stream_)
-    audio_stream_stop(audio_stream_);
+  audio_stream_stop(audio_stream_);
 }
 
 bool LinphoneVoiceChannel::SetPlayout(bool playout) {
@@ -160,74 +171,149 @@ bool LinphoneVoiceChannel::SetPlayout(bool playout) {
   return true;
 }
 
+#ifdef MEDIASTREAMER_LESS_2_11
+static inline RtpSession * audio_stream_get_rtp_session(const AudioStream *stream) {
+#ifdef MEDIASTREAMER_LESS_2_9
+  return stream->session;
+#else
+  return stream->ms.session;
+#endif
+}
+#endif
+
 bool LinphoneVoiceChannel::SetSendCodecs(const std::vector<AudioCodec>& codecs) {
 
-  bool first = true;
   std::vector<AudioCodec>::const_iterator i;
 
-  ortp_set_log_level_mask(ORTP_MESSAGE|ORTP_WARNING|ORTP_ERROR|ORTP_FATAL);
+  pt_ = -1;
 
   for (i = codecs.begin(); i < codecs.end(); i++) {
 
-    if (!engine_->FindAudioCodec(*i))
+    if (!engine_->FindAudioCodec(*i)) {
+      LOG(LS_INFO) << "Codec " << i->name << "/" << i->clockrate << " is not supported";
       continue;
-#ifdef HAVE_ILBC
-    if (engine_->have_ilbc && i->name == payload_type_ilbc.mime_type) {
-      rtp_profile_set_payload(&av_profile, i->id, &payload_type_ilbc);
     }
-#endif
-#ifdef HAVE_SPEEX
-    if (i->name == payload_type_speex_wb.mime_type && i->clockrate == payload_type_speex_wb.clock_rate) {
-      rtp_profile_set_payload(&av_profile, i->id, &payload_type_speex_wb);
-    } else if (i->name == payload_type_speex_nb.mime_type && i->clockrate == payload_type_speex_nb.clock_rate) {
-      rtp_profile_set_payload(&av_profile, i->id, &payload_type_speex_nb);
+
+    LOG(LS_INFO) << "Using " << i->name << "/" << i->clockrate;
+    pt_ = i->id;
+    break;
+
+  }
+
+  if (pt_ == -1) {
+    // We're being asked to set an empty list of codecs. This will only happen when
+    // working with a buggy client; let's try PCMU.
+    LOG(LS_WARNING) << "Received empty list of codces; using PCMU/8000";
+    pt_ = 0;
+  }
+
+  if (pt_ != -1 && profile_ && playport == PORT_UNUSED)
+    StartCall();
+
+  return true;
+
+}
+
+bool LinphoneVoiceChannel::SetRecvCodecs(const std::vector<AudioCodec>& codecs) {
+
+  std::vector<AudioCodec>::const_iterator i;
+
+  profile_ = false;
+
+  for (i = codecs.begin(); i < codecs.end(); i++) {
+
+    if (!engine_->FindAudioCodec(*i)) {
+      LOG(LS_INFO) << "Codec " << i->name << "/" << i->clockrate << " is not supported";
+      continue;
     }
-#endif
 
-    if (i->id == 0)
+    if (engine_->have_ilbc && stricmp(i->name.c_str(), payload_type_ilbc.mime_type) == 0)
+      rtp_profile_set_payload(&av_profile, i->id, &payload_type_ilbc);
+    else if (engine_->have_speex && stricmp(i->name.c_str(), payload_type_speex_wb.mime_type) == 0 && i->clockrate == payload_type_speex_wb.clock_rate)
+      rtp_profile_set_payload(&av_profile, i->id, &payload_type_speex_wb);
+    else if (engine_->have_speex && stricmp(i->name.c_str(), payload_type_speex_nb.mime_type) == 0 && i->clockrate == payload_type_speex_nb.clock_rate)
+      rtp_profile_set_payload(&av_profile, i->id, &payload_type_speex_nb);
+    else if (engine_->have_gsm && stricmp(i->name.c_str(), payload_type_gsm.mime_type) == 0)
+      rtp_profile_set_payload(&av_profile, i->id, &payload_type_gsm);
+    else if (stricmp(i->name.c_str(), payload_type_telephone_event.mime_type) == 0)
+      rtp_profile_set_payload(&av_profile, i->id, &payload_type_telephone_event);
+    else if (i->id == 0)
       rtp_profile_set_payload(&av_profile, 0, &payload_type_pcmu8000);
 
-    if (i->name == payload_type_telephone_event.mime_type) {
-      rtp_profile_set_payload(&av_profile, i->id, &payload_type_telephone_event);
-    }
+    LOG(LS_INFO) << "Accepting " << i->name << "/" << i->clockrate;
+    profile_ = true;
 
-    if (first) {
-      StopRing();
-      LOG(LS_INFO) << "Using " << i->name << "/" << i->clockrate;
-      pt_ = i->id;
-      audio_stream_ = audio_stream_start(&av_profile, 2000, "127.0.0.1", 3000, i->id, 250, 0);
-      first = false;
-    }
   }
 
-  if (first) {
-    StopRing();
+  if (!profile_) {
     // We're being asked to set an empty list of codecs. This will only happen when
     // working with a buggy client; let's try PCMU.
-    LOG(LS_WARNING) << "Received empty list of codces; using PCMU/8000";
-    audio_stream_ = audio_stream_start(&av_profile, 2000, "127.0.0.1", 3000, 0, 250, 0);
+    LOG(LS_WARNING) << "Received empty list of codces; accepting PCMU/8000";
+    rtp_profile_set_payload(&av_profile, 0, &payload_type_pcmu8000);
+    profile_ = true;
   }
 
+  if (pt_ != -1 && profile_ && playport == PORT_UNUSED)
+    StartCall();
+
+  return true;
+}
+
+bool LinphoneVoiceChannel::StartCall()
+{
+  StopRing();
+
+  MSSndCard *playcard = ms_snd_card_manager_get_default_playback_card(ms_snd_card_manager_get());
+  if (!playcard)
+    return false;
+
+  MSSndCard *captcard = ms_snd_card_manager_get_default_capture_card(ms_snd_card_manager_get());
+  if (!captcard)
+    return false;
+
+  if (audio_stream_start_now(audio_stream_, &av_profile, "localhost", captport, captport+1, pt_, 250, playcard, captcard, 0))
+    return false;
+
+  playport = rtp_session_get_local_port(audio_stream_get_rtp_session(audio_stream_));
+
+  return true;
+}
+
+bool LinphoneVoiceChannel::AddSendStream(const cricket::StreamParams& st)
+{
+  LOG(LS_INFO) << "linphone:: SET send stream ssrc: " << st.first_ssrc();
+  rtp_session_set_ssrc(audio_stream_get_rtp_session(audio_stream_), st.first_ssrc());
   return true;
 }
 
 bool LinphoneVoiceChannel::SetSend(SendFlags flag) {
-  mute_ = !flag;
+  mute_ = (flag == SEND_NOTHING);
+  audio_stream_mute_rtp(audio_stream_, mute_);
+  return true;
+}
+
+bool LinphoneVoiceChannel::Mute(bool on) {
+  mute_ = on;
+  audio_stream_mute_rtp(audio_stream_, mute_);
   return true;
 }
 
 void LinphoneVoiceChannel::OnPacketReceived(talk_base::Buffer* packet) {
-  const void* data = packet->data();
-  int len = packet->length();
-  uint8 buf[2048];
-  memcpy(buf, data, len);
+  if (playport == PORT_UNUSED)
+    return;
 
   /* We may receive packets with payload type 13: comfort noise. Linphone can't
    * handle them, so let's ignore those packets.
    */
-  int payloadtype = buf[1] & 0x7f;
+  int payloadtype = ((const uint8*)packet->data())[1] & 0x7f;
   if (play_ && payloadtype != 13)
-    socket_->SendTo(buf, len, talk_base::SocketAddress("localhost",2000));
+    socket_->SendTo(packet->data(), packet->length(), talk_base::SocketAddress("localhost", playport));
+}
+
+void LinphoneVoiceChannel::OnRtcpReceived(talk_base::Buffer* packet) {
+  if (playport == PORT_UNUSED)
+    return;
+  socketRtcp_->SendTo(packet->data(), packet->length(), talk_base::SocketAddress("localhost", playport+1));
 }
 
 void LinphoneVoiceChannel::StartRing(bool bIncomingCall)
@@ -265,12 +351,22 @@ void LinphoneVoiceChannel::StopRing()
 
 void LinphoneVoiceChannel::OnIncomingData(talk_base::AsyncSocket *s)
 {
-  char *buf[2048];
-  int len;
-  len = s->Recv(buf, sizeof(buf));
-  talk_base::Buffer packet(buf, len);
+  char buf[2048];
+  int len = s->Recv(buf, sizeof(buf));
+  talk_base::Buffer packet(buf, len, sizeof(buf));
   if (network_interface_ && !mute_)
     network_interface_->SendPacket(&packet);
 }
 
+void LinphoneVoiceChannel::OnIncomingRtcp(talk_base::AsyncSocket *s)
+{
+  char buf[2048];
+  int len = s->Recv(buf, sizeof(buf));
+  talk_base::Buffer packet(buf, len, sizeof(buf));
+  if (network_interface_)
+    network_interface_->SendRtcp(&packet);
 }
+
+}
+
+#endif // HAVE_LINPHONE
diff --git a/protocols/jabber/glibjingle/talk/session/phone/linphonemediaengine.h b/protocols/jabber/libjingle/talk/session/phone/linphonemediaengine.h
index 883580c..b123b4b 100644
--- a/protocols/jabber/glibjingle/talk/session/phone/linphonemediaengine.h
+++ b/protocols/jabber/libjingle/talk/session/phone/linphonemediaengine.h
@@ -30,6 +30,8 @@
 #ifndef TALK_SESSION_PHONE_LINPHONEMEDIAENGINE_H_
 #define TALK_SESSION_PHONE_LINPHONEMEDIAENGINE_H_
 
+#ifdef HAVE_LINPHONE
+
 #include <string>
 #include <vector>
 
@@ -53,17 +55,8 @@ class LinphoneMediaEngine : public MediaEngineInterface {
   LinphoneMediaEngine(const std::string& ringWav,  const std::string& callWav);
   virtual ~LinphoneMediaEngine() {}
 
-  // Should be called before codecs() and video_codecs() are called. We need to
-  // set the voice and video codecs; otherwise, Jingle initiation will fail.
-  void set_voice_codecs(const std::vector<AudioCodec>& codecs) {
-    voice_codecs_ = codecs;
-  }
-  void set_video_codecs(const std::vector<VideoCodec>& codecs) {
-    video_codecs_ = codecs;
-  }
-
   // Implement pure virtual methods of MediaEngine.
-  virtual bool Init();
+  virtual bool Init() { return true; }
   virtual void Terminate();
   virtual int GetCapabilities();
   virtual VoiceMediaChannel* CreateChannel();
@@ -84,27 +77,27 @@ class LinphoneMediaEngine : public MediaEngineInterface {
   virtual bool SetLocalRenderer(VideoRenderer* renderer) { return true; }
   // TODO: control channel send?
   virtual CaptureResult SetVideoCapture(bool capture) { return CR_SUCCESS; }
-  virtual const std::vector<AudioCodec>& audio_codecs() {
-    return voice_codecs_;
-  }
-  virtual const std::vector<VideoCodec>& video_codecs() {
-    return video_codecs_;
-  }
+  virtual const std::vector<AudioCodec>& audio_codecs() { return voice_codecs_; }
+  virtual const std::vector<VideoCodec>& video_codecs() { return video_codecs_; }
   virtual bool FindAudioCodec(const AudioCodec& codec);
   virtual bool FindVideoCodec(const VideoCodec& codec) { return true; }
   virtual void SetVoiceLogging(int min_sev, const char* filter) {}
   virtual void SetVideoLogging(int min_sev, const char* filter) {}
+  virtual bool SetVideoCapturer(cricket::VideoCapturer*, uint32) { return true; }
+  virtual bool GetOutputVolume(int*) { return true; }
+  virtual bool RegisterVideoProcessor(cricket::VideoProcessor*) { return true; }
+  virtual bool UnregisterVideoProcessor(cricket::VideoProcessor*) { return true; }
+  virtual bool RegisterVoiceProcessor(uint32, cricket::VoiceProcessor*, cricket::MediaProcessorDirection) { return true; }
+  virtual bool UnregisterVoiceProcessor(uint32, cricket::VoiceProcessor*, cricket::MediaProcessorDirection) { return true; }
 
   std::string GetRingWav(){return ring_wav_;}
   std::string GetCallWav(){return call_wav_;}
 
-  int have_ilbc;
+  bool have_ilbc;
+  bool have_speex;
+  bool have_gsm;
 
  private:
-  std::string voice_input_filename_;
-  std::string voice_output_filename_;
-  std::string video_input_filename_;
-  std::string video_output_filename_;
   std::vector<AudioCodec> voice_codecs_;
   std::vector<VideoCodec> video_codecs_;
 
@@ -120,12 +113,10 @@ class LinphoneVoiceChannel : public VoiceMediaChannel {
   virtual ~LinphoneVoiceChannel();
 
   // Implement pure virtual methods of VoiceMediaChannel.
-  virtual bool SetRecvCodecs(const std::vector<AudioCodec>& codecs) { return true; }
+  virtual bool SetRecvCodecs(const std::vector<AudioCodec>& codecs);
   virtual bool SetSendCodecs(const std::vector<AudioCodec>& codecs);
   virtual bool SetPlayout(bool playout);
   virtual bool SetSend(SendFlags flag);
-  virtual bool AddStream(uint32 ssrc) { return true; }
-  virtual bool RemoveStream(uint32 ssrc) { return true; }
   virtual bool GetActiveStreams(AudioInfo::StreamList* actives) { return true; }
   virtual int GetOutputLevel() { return 0; }
   virtual bool SetOutputScaling(uint32 ssrc, double left, double right) {
@@ -134,40 +125,53 @@ class LinphoneVoiceChannel : public VoiceMediaChannel {
   virtual bool GetOutputScaling(uint32 ssrc, double* left, double* right) {
     return false;
   }
-  virtual void SetRingbackTone(const char* buf, int len) {}
+  virtual bool SetRingbackTone(const char* buf, int len) { return true; }
   virtual bool PlayRingbackTone(bool play, bool loop) { return true; }
   virtual bool PressDTMF(int event, bool playout) { return true; }
   virtual bool GetStats(VoiceMediaInfo* info) { return true; }
 
   // Implement pure virtual methods of MediaChannel.
   virtual void OnPacketReceived(talk_base::Buffer* packet);
-  virtual void OnRtcpReceived(talk_base::Buffer* packet) {}
-  virtual void SetSendSsrc(uint32 id) {}  // TODO: change RTP packet?
-  virtual bool SetRtcpCName(const std::string& cname) { return true; }
-  virtual bool Mute(bool on) { return mute_; }
+  virtual void OnRtcpReceived(talk_base::Buffer* packet);
+  virtual bool Mute(bool on);
   virtual bool SetSendBandwidth(bool autobw, int bps) { return true; }
   virtual bool SetOptions(int options) { return true; }
   virtual bool SetRecvRtpHeaderExtensions(
       const std::vector<RtpHeaderExtension>& extensions) { return true; }
   virtual bool SetSendRtpHeaderExtensions(
       const std::vector<RtpHeaderExtension>& extensions) { return true; }
+  virtual bool AddSendStream(const cricket::StreamParams&);
+  virtual bool RemoveSendStream(uint32) { return true; }
+  virtual bool AddRecvStream(const cricket::StreamParams&) { return true; }
+  virtual bool RemoveRecvStream(uint32) { return true; }
+  virtual int GetOptions() const { return 0; }
+  virtual bool PlayRingbackTone(uint32, bool, bool) { return true; }
 
   virtual void StartRing(bool bIncomingCall);
   virtual void StopRing();
 
  private:
   int pt_;
+  bool profile_;
   bool mute_;
   bool play_;
   AudioStream *audio_stream_;
   LinphoneMediaEngine *engine_;
   RingStream* ring_stream_;
   talk_base::scoped_ptr<talk_base::AsyncSocket> socket_;
+  talk_base::scoped_ptr<talk_base::AsyncSocket> socketRtcp_;
   void OnIncomingData(talk_base::AsyncSocket *s);
+  void OnIncomingRtcp(talk_base::AsyncSocket *s);
+  bool StartCall();
+
+  int captport; // local port for audio_stream
+  int playport; // local port for rtp
 
   DISALLOW_COPY_AND_ASSIGN(LinphoneVoiceChannel);
 };
 
 }  // namespace cricket
 
+#endif // HAVE_LINPHONE
+
 #endif  // TALK_SESSION_PHONE_LINPHONEMEDIAENGINE_H_
